-- ============================================================================
-- COMPLETE SEED: Create Auth Users + Profiles + Properties
-- ============================================================================
-- This script creates everything in one go, bypassing cache issues
-- Run this in Supabase Dashboard > SQL Editor
-- ============================================================================

-- ============================================================================
-- STEP 1: Create Auth Users (if they don't exist)
-- ============================================================================
-- Note: We use raw SQL to insert into auth.users with proper password hashing

-- First, let's create a helper function to create auth users if they don't exist
CREATE OR REPLACE FUNCTION create_demo_user(
  user_email TEXT,
  user_password TEXT DEFAULT 'Demo123!'
) RETURNS UUID AS $$
DECLARE
  existing_user_id UUID;
  new_user_id UUID;
  encrypted_pw TEXT;
BEGIN
  -- Check if user already exists
  SELECT id INTO existing_user_id FROM auth.users WHERE email = user_email;

  IF existing_user_id IS NOT NULL THEN
    RETURN existing_user_id;
  END IF;

  -- Generate a new UUID for the user
  new_user_id := gen_random_uuid();

  -- Hash the password using crypt (Supabase uses bcrypt)
  encrypted_pw := crypt(user_password, gen_salt('bf'));

  -- Insert into auth.users
  INSERT INTO auth.users (
    id,
    instance_id,
    email,
    encrypted_password,
    email_confirmed_at,
    created_at,
    updated_at,
    raw_app_meta_data,
    raw_user_meta_data,
    is_super_admin,
    role,
    aud
  ) VALUES (
    new_user_id,
    '00000000-0000-0000-0000-000000000000',
    user_email,
    encrypted_pw,
    NOW(),
    NOW(),
    NOW(),
    '{"provider":"email","providers":["email"]}'::jsonb,
    '{}'::jsonb,
    false,
    'authenticated',
    'authenticated'
  );

  -- Also insert into auth.identities
  INSERT INTO auth.identities (
    provider_id,
    user_id,
    identity_data,
    provider,
    last_sign_in_at,
    created_at,
    updated_at
  ) VALUES (
    new_user_id::text,
    new_user_id,
    jsonb_build_object('sub', new_user_id::text, 'email', user_email),
    'email',
    NOW(),
    NOW(),
    NOW()
  );

  RETURN new_user_id;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- ============================================================================
-- STEP 2: Create all demo users
-- ============================================================================

DO $$
DECLARE
  sophie_id UUID;
  ahmed_id UUID;
  emma_id UUID;
  lucas_id UUID;
  maria_id UUID;
  jeanmarc_id UUID;
  isabelle_id UUID;
  thomas_id UUID;
  sophie_v_id UUID;
  pierre_id UUID;
  laura_id UUID;
  maxime_id UUID;
BEGIN
  RAISE NOTICE 'üë• Creating Auth users...';

  -- Searchers
  sophie_id := create_demo_user('sophie.laurent@demo.easyco.com');
  ahmed_id := create_demo_user('ahmed.elmansouri@demo.easyco.com');
  emma_id := create_demo_user('emma.vanderberg@demo.easyco.com');
  lucas_id := create_demo_user('lucas.dubois@demo.easyco.com');
  maria_id := create_demo_user('maria.santos@demo.easyco.com');

  -- Owners
  jeanmarc_id := create_demo_user('jeanmarc.petit@demo.easyco.com');
  isabelle_id := create_demo_user('isabelle.moreau@demo.easyco.com');
  thomas_id := create_demo_user('thomas.janssens@demo.easyco.com');
  sophie_v_id := create_demo_user('sophie.vermeulen@demo.easyco.com');

  -- Residents
  pierre_id := create_demo_user('pierre.lecomte@demo.easyco.com');
  laura_id := create_demo_user('laura.gonzalez@demo.easyco.com');
  maxime_id := create_demo_user('maxime.dubois@demo.easyco.com');

  RAISE NOTICE '‚úÖ Auth users created';

  -- ============================================================================
  -- STEP 3: Create Searcher Profiles
  -- ============================================================================

  RAISE NOTICE 'üìù Creating searcher profiles...';

  INSERT INTO user_profiles (
    user_id, user_type, first_name, last_name, bio, phone_number,
    nationality, occupation_status, field_of_study_or_work,
    budget_min, budget_max, preferred_districts, preferred_move_in_date,
    is_smoker, has_pets, cleanliness_preference, sociability_level
  ) VALUES
  (sophie_id, 'searcher', 'Sophie', 'Laurent',
   'Marketing Manager de 29 ans, sociable et organis√©e, cherche colocation sympa proche du centre.',
   '+32 485 12 34 56', 'French', 'employed', 'Marketing Manager',
   600, 900, ARRAY['Ixelles', 'Saint-Gilles', 'Etterbeek'], '2024-12-01',
   false, false, 'tidy', 'high'),

  (ahmed_id, 'searcher', 'Ahmed', 'El Mansouri',
   '√âtudiant ULB en √©conomie, 23 ans, calme et studieux, cherche logement proche universit√©.',
   '+32 485 23 45 67', 'Moroccan', 'student', 'Student',
   400, 600, ARRAY['Ixelles', 'Schaerbeek', 'Etterbeek'], '2025-01-15',
   false, false, 'moderate', 'medium'),

  (emma_id, 'searcher', 'Emma', 'Van Der Berg',
   'Designer freelance, 36 ans, cr√©ative et ind√©pendante, cherche espace lumineux avec bureau.',
   '+32 485 34 56 78', 'Belgian', 'self-employed', 'Designer',
   700, 1000, ARRAY['Forest', 'Uccle', 'Saint-Gilles'], '2024-11-15',
   false, true, 'tidy', 'medium'),

  (lucas_id, 'searcher', 'Lucas', 'Dubois',
   'Comptable en couple, 32 ans, calme et organis√©, cherche appartement spacieux quartier r√©sidentiel.',
   '+32 485 45 67 89', 'Belgian', 'employed', 'Accountant',
   900, 1300, ARRAY['Woluwe-Saint-Pierre', 'Etterbeek', 'Auderghem'], '2025-02-01',
   false, false, 'spotless', 'low'),

  (maria_id, 'searcher', 'Maria', 'Santos',
   'EU Policy Advisor, 34 ans, internationale et sociable, cherche colocation multiculturelle.',
   '+32 485 56 78 90', 'Portuguese', 'employed', 'Policy Advisor',
   750, 1100, ARRAY['Centre', 'Ixelles', 'Etterbeek'], '2024-12-15',
   false, false, 'tidy', 'high')
  ON CONFLICT (user_id) DO UPDATE SET
    first_name = EXCLUDED.first_name,
    last_name = EXCLUDED.last_name,
    bio = EXCLUDED.bio;

  -- ============================================================================
  -- STEP 4: Create Owner Profiles
  -- ============================================================================

  RAISE NOTICE 'üè† Creating owner profiles...';

  INSERT INTO user_profiles (
    user_id, user_type, first_name, last_name, bio, phone_number, has_property
  ) VALUES
  (jeanmarc_id, 'owner', 'Jean-Marc', 'Petit',
   'Propri√©taire depuis 5 ans, bienveillant et r√©actif. Propose appartement r√©nov√© √† Ixelles.',
   '+32 486 12 34 56', true),

  (isabelle_id, 'owner', 'Isabelle', 'Moreau',
   'Investisseuse immobili√®re depuis 15 ans, g√®re plusieurs propri√©t√©s √† Bruxelles avec professionnalisme.',
   '+32 486 23 45 67', true),

  (thomas_id, 'owner', 'Thomas', 'Janssens',
   'Premier investissement locatif, studio √©tudiant √† Schaerbeek. Jeune propri√©taire motiv√©.',
   '+32 486 34 56 78', true),

  (sophie_v_id, 'owner', 'Sophie', 'Vermeulen',
   'Sp√©cialiste coliving depuis 8 ans, propose maison communautaire avec jardin √† Forest.',
   '+32 486 45 67 89', true)
  ON CONFLICT (user_id) DO UPDATE SET
    first_name = EXCLUDED.first_name,
    last_name = EXCLUDED.last_name,
    bio = EXCLUDED.bio;

  -- ============================================================================
  -- STEP 5: Create Resident Profiles
  -- ============================================================================

  RAISE NOTICE 'üë• Creating resident profiles...';

  INSERT INTO user_profiles (
    user_id, user_type, first_name, last_name, bio, phone_number,
    nationality, occupation_status, field_of_study_or_work,
    is_smoker, has_pets, cleanliness_preference, sociability_level
  ) VALUES
  (pierre_id, 'resident', 'Pierre', 'Lecomte',
   'Ing√©nieur civil de 27 ans, calme et rang√©, appr√©cie vie en colocation √©quilibr√©e.',
   '+32 487 12 34 56', 'Belgian', 'employed', 'Civil Engineer',
   false, false, 'tidy', 'medium'),

  (laura_id, 'resident', 'Laura', 'Gonzalez',
   'Doctorante en biologie, 26 ans, studieuse et respectueuse, cherche environnement calme.',
   '+32 487 23 45 67', 'Spanish', 'student', 'PhD Student',
   false, false, 'spotless', 'low'),

  (maxime_id, 'resident', 'Maxime', 'Dubois',
   'D√©veloppeur en startup, 25 ans, sociable et tech-savvy, aime les colocations dynamiques.',
   '+32 487 34 56 78', 'Belgian', 'employed', 'Software Developer',
   false, false, 'moderate', 'high')
  ON CONFLICT (user_id) DO UPDATE SET
    first_name = EXCLUDED.first_name,
    last_name = EXCLUDED.last_name,
    bio = EXCLUDED.bio;

  -- ============================================================================
  -- STEP 6: Create Properties
  -- ============================================================================

  RAISE NOTICE 'üèòÔ∏è  Creating properties...';

  INSERT INTO properties (
    owner_id, title, description, property_type,
    address, city, neighborhood, postal_code, country, latitude, longitude,
    bedrooms, bathrooms, surface_area, floor_number, furnished,
    monthly_rent, charges, deposit, available_from, minimum_stay_months,
    amenities, smoking_allowed, pets_allowed, couples_allowed,
    images, main_image, status, is_available
  ) VALUES
  (jeanmarc_id,
   'Appartement 2 Chambres - Ixelles Flagey',
   'Magnifique appartement de 85m¬≤ au c≈ìur du quartier Flagey. R√©nov√© avec go√ªt, parquet massif, cuisine √©quip√©e, grande luminosit√©. Proche trams 81, bus, commerces et vie culturelle anim√©e.',
   'apartment',
   'Avenue de la Couronne 234', 'Ixelles', 'Flagey', '1050', 'Belgium', 50.8272, 4.3719,
   2, 1, 85, 2, true,
   1250, 150, 2500, '2024-12-01', 6,
   '["wifi", "elevator", "balcony", "washing_machine", "dishwasher", "heating", "furnished"]'::jsonb,
   false, false, true,
   ARRAY['https://images.unsplash.com/photo-1502672260066-6bc36a8baf37?w=800', 'https://images.unsplash.com/photo-1502672023488-70e25813eb80?w=800'],
   'https://images.unsplash.com/photo-1502672260066-6bc36a8baf37?w=800',
   'published', true),

  (thomas_id,
   'Studio Schaerbeek - Quartier Diamant',
   'Studio fonctionnel de 35m¬≤ id√©al √©tudiant. Meubl√© et √©quip√©, kitchenette, salle de bain, Wi-Fi inclus. Proche m√©tro Diamant, ULB, commerces. Quartier multiculturel et vivant.',
   'studio',
   'Rue Josaphat 145', 'Schaerbeek', 'Diamant', '1030', 'Belgium', 50.8571, 4.3836,
   0, 1, 35, 3, true,
   650, 80, 1300, '2025-01-01', 3,
   '["wifi", "heating", "furnished"]'::jsonb,
   false, false, false,
   ARRAY['https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=800'],
   'https://images.unsplash.com/photo-1522708323590-d24dbb6b0267?w=800',
   'published', true),

  (sophie_v_id,
   'Coliving Forest - Maison Communautaire',
   'Magnifique maison de ma√Ætre de 280m¬≤ transform√©e en coliving. 6 chambres priv√©es avec espaces communs partag√©s : salon, cuisine, jardin 200m¬≤. Ambiance internationale et conviviale.',
   'coliving',
   'Avenue Besme 89', 'Forest', 'Altitude 100', '1190', 'Belgium', 50.8143, 4.3142,
   6, 3, 280, 0, true,
   695, 200, 1390, '2024-11-15', 3,
   '["wifi", "garden", "laundry", "common_areas", "heating", "furnished"]'::jsonb,
   false, true, false,
   ARRAY['https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800', 'https://images.unsplash.com/photo-1600047509807-ba8f99d2cdde?w=800'],
   'https://images.unsplash.com/photo-1564013799919-ab600027ffc6?w=800',
   'published', true),

  (isabelle_id,
   'Appartement 3 Chambres - Woluwe Standing',
   'Spacieux 3 chambres de 120m¬≤ dans r√©sidence s√©curis√©e. Haut standing, terrasse 15m¬≤, parking, salle de gym. Quartier r√©sidentiel calme proche Parc de Woluwe et transports.',
   'apartment',
   'Avenue de Tervueren 412', 'Woluwe-Saint-Pierre', 'Montgomery', '1150', 'Belgium', 50.8429, 4.4089,
   3, 2, 120, 4, true,
   1800, 250, 3600, '2025-02-01', 12,
   '["wifi", "elevator", "parking", "gym", "balcony", "heating", "dishwasher", "washing_machine", "furnished"]'::jsonb,
   false, false, true,
   ARRAY['https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=800', 'https://images.unsplash.com/photo-1600607687939-ce8a6c25118c?w=800'],
   'https://images.unsplash.com/photo-1600596542815-ffad4c1539a9?w=800',
   'published', true),

  (isabelle_id,
   'Maison 4 Chambres - Saint-Gilles Parvis',
   'Belle maison bruxelloise typique de 150m¬≤ avec jardin 80m¬≤. 4 chambres, 2 SDB, parquet d''origine, chemin√©e. Quartier Parvis de Saint-Gilles, artistique et vivant.',
   'house',
   'Rue de la Victoire 78', 'Saint-Gilles', 'Parvis', '1060', 'Belgium', 50.8283, 4.3456,
   4, 2, 150, 0, false,
   2100, 200, 4200, '2024-12-15', 12,
   '["wifi", "garden", "laundry", "dishwasher", "washing_machine", "heating", "balcony"]'::jsonb,
   false, false, true,
   ARRAY['https://images.unsplash.com/photo-1568605114967-8130f3a36994?w=800', 'https://images.unsplash.com/photo-1600585154526-990dced4db0d?w=800'],
   'https://images.unsplash.com/photo-1568605114967-8130f3a36994?w=800',
   'published', true)
  ON CONFLICT DO NOTHING;

  RAISE NOTICE '‚úÖ Properties created';

END $$;

-- Cleanup
DROP FUNCTION IF EXISTS create_demo_user(TEXT, TEXT);

-- ============================================================================
-- VERIFICATION
-- ============================================================================

-- Check Auth users
SELECT
  'üîê Auth Users' as type,
  COUNT(*) as count
FROM auth.users
WHERE email LIKE '%@demo.easyco.com';

-- Check profiles by type
SELECT
  user_type,
  COUNT(*) as count,
  string_agg(first_name || ' ' || last_name, ', ') as names
FROM user_profiles
WHERE user_id IN (
  SELECT id FROM auth.users WHERE email LIKE '%@demo.easyco.com'
)
GROUP BY user_type
ORDER BY user_type;

-- Check properties
SELECT
  'üè† ' || p.title as property,
  '‚Ç¨' || p.monthly_rent as rent,
  p.city,
  up.first_name || ' ' || up.last_name as owner
FROM properties p
JOIN user_profiles up ON p.owner_id = up.user_id
WHERE up.user_id IN (
  SELECT id FROM auth.users WHERE email LIKE '%@demo.easyco.com'
)
ORDER BY p.monthly_rent;

-- Final summary
SELECT '‚úÖ SEED COMPLETE!' as status,
  (SELECT COUNT(*) FROM auth.users WHERE email LIKE '%@demo.easyco.com') as auth_users,
  (SELECT COUNT(*) FROM user_profiles WHERE user_id IN (SELECT id FROM auth.users WHERE email LIKE '%@demo.easyco.com')) as profiles,
  (SELECT COUNT(*) FROM properties WHERE owner_id IN (SELECT user_id FROM user_profiles WHERE user_id IN (SELECT id FROM auth.users WHERE email LIKE '%@demo.easyco.com'))) as properties;
