/**
 * Diagnostic complet du sch√©ma Supabase actuel
 */

import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

dotenv.config({ path: '.env.local' });

const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL;
const SERVICE_ROLE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

const supabase = createClient(SUPABASE_URL, SERVICE_ROLE_KEY, {
  auth: { autoRefreshToken: false, persistSession: false }
});

console.log('\nüîç DIAGNOSTIC COMPLET DU SCH√âMA SUPABASE\n');
console.log('='.repeat(70));

async function checkTable(tableName) {
  console.log(`\nüìä Table: ${tableName}`);
  console.log('-'.repeat(70));

  try {
    // Essayer de lire la structure
    const { data, error } = await supabase
      .from(tableName)
      .select('*')
      .limit(1);

    if (error) {
      console.log(`   ‚ùå Erreur: ${error.message}`);
      return null;
    }

    if (data && data.length > 0) {
      const columns = Object.keys(data[0]);
      console.log(`   ‚úÖ Existe avec ${columns.length} colonnes`);
      console.log(`   üìã Colonnes: ${columns.slice(0, 10).join(', ')}${columns.length > 10 ? '...' : ''}`);
      return columns;
    } else {
      console.log(`   ‚úÖ Existe mais vide`);
      // Essayer d'obtenir les colonnes via insert dry-run
      return [];
    }
  } catch (err) {
    console.log(`   ‚ùå Exception: ${err.message}`);
    return null;
  }
}

async function getTableColumns(tableName) {
  // Utiliser une requ√™te SQL via RPC si disponible
  try {
    const { data, error } = await supabase.rpc('get_table_columns', {
      table_name: tableName
    });

    if (!error && data) {
      return data;
    }
  } catch (err) {
    // RPC non disponible, utiliser m√©thode alternative
  }

  // M√©thode alternative: lire un row
  const { data } = await supabase.from(tableName).select('*').limit(1);
  if (data && data.length > 0) {
    return Object.keys(data[0]);
  }
  return [];
}

async function main() {
  console.log('\nüéØ OBJECTIF: Identifier l\'√©tat exact du sch√©ma avant migration\n');

  // Tables √† v√©rifier
  const tables = [
    'users',
    'user_profiles',
    'user_sessions',
    'user_verifications',
    'user_consents'
  ];

  const schemaState = {};

  for (const table of tables) {
    const columns = await checkTable(table);
    schemaState[table] = columns;
  }

  console.log('\n\nüìã R√âSUM√â DU DIAGNOSTIC');
  console.log('='.repeat(70));

  Object.entries(schemaState).forEach(([table, columns]) => {
    if (columns === null) {
      console.log(`‚ùå ${table}: N'EXISTE PAS`);
    } else if (columns.length === 0) {
      console.log(`‚ö†Ô∏è  ${table}: EXISTE mais structure inconnue`);
    } else {
      console.log(`‚úÖ ${table}: ${columns.length} colonnes`);
    }
  });

  // Analyse sp√©cifique user_profiles
  console.log('\n\nüî¨ ANALYSE D√âTAILL√âE: user_profiles');
  console.log('='.repeat(70));

  if (schemaState.user_profiles && schemaState.user_profiles.length > 0) {
    const columns = schemaState.user_profiles;

    console.log('\nüìä Colonnes actuelles:');
    columns.forEach((col, idx) => {
      console.log(`   ${idx + 1}. ${col}`);
    });

    // V√©rifier colonnes critiques
    console.log('\nüéØ V√©rification colonnes critiques:');
    const criticalColumns = [
      'first_name',
      'last_name',
      'budget_min',
      'budget_max',
      'is_smoker',
      'has_pets',
      'cleanliness_preference',
      'landlord_type'
    ];

    criticalColumns.forEach(col => {
      const exists = columns.includes(col);
      console.log(`   ${exists ? '‚úÖ' : '‚ùå'} ${col}`);
    });

    // V√©rifier si profile_data existe (JSONB blob)
    const hasJsonBlob = columns.includes('profile_data');
    console.log(`\nüîç JSONB Blob (profile_data): ${hasJsonBlob ? '‚úÖ EXISTE' : '‚ùå N\'existe pas'}`);

    if (hasJsonBlob) {
      console.log('   ‚ö†Ô∏è  PROBL√àME: Les donn√©es sont stock√©es dans un blob JSONB');
      console.log('   ‚úÖ SOLUTION: La migration va cr√©er des colonnes typ√©es');
    }
  }

  // V√©rifier tables de v√©rification et consentements
  console.log('\n\nüìã TABLES DE V√âRIFICATION ET CONSENTEMENTS');
  console.log('='.repeat(70));

  const verificationsExist = schemaState.user_verifications !== null;
  const consentsExist = schemaState.user_consents !== null;

  console.log(`user_verifications: ${verificationsExist ? '‚úÖ EXISTE' : '‚ùå N\'EXISTE PAS - sera cr√©√©e'}`);
  console.log(`user_consents: ${consentsExist ? '‚úÖ EXISTE' : '‚ùå N\'EXISTE PAS - sera cr√©√©e'}`);

  // Recommandations
  console.log('\n\nüí° RECOMMANDATIONS POUR LA MIGRATION');
  console.log('='.repeat(70));

  if (!verificationsExist && !consentsExist) {
    console.log('‚úÖ PARFAIT: Les tables n\'existent pas, la migration peut tout cr√©er');
    console.log('   ‚Üí Utiliser la migration COMPL√àTE (002_complete_schema_phase1.sql)');
  } else {
    console.log('‚ö†Ô∏è  ATTENTION: Certaines tables existent d√©j√†');
    console.log('   ‚Üí Utiliser une migration INCR√âMENTALE (ajouter seulement colonnes manquantes)');
  }

  if (schemaState.user_profiles && schemaState.user_profiles.length < 20) {
    console.log('\n‚ö†Ô∏è  user_profiles a peu de colonnes, migration n√©cessaire');
    console.log('   ‚Üí Ajouter ~100 colonnes typ√©es pour remplacer JSONB');
  }

  console.log('\n\nüöÄ PROCHAINES √âTAPES');
  console.log('='.repeat(70));
  console.log('1. Cr√©er migration SQL adapt√©e bas√©e sur ce diagnostic');
  console.log('2. Appliquer migration via Supabase Dashboard');
  console.log('3. V√©rifier avec: node scripts/verify-migration.mjs');
  console.log('4. Tester onboarding flows');
  console.log('');
}

main().catch(console.error);
